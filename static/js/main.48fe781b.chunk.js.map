{"version":3,"sources":["components/PageTitle/PageTitle.styled.jsx","components/PageTitle/PageTitle.jsx","constants/iconSize.js","constants/theme.js","components/Event/Event.styled.jsx","components/Event/Event.jsx","utils/formatEventStart.js","utils/formatEventDuration.js","components/EventBoard/EventBoard.styled.jsx","components/EventBoard/EventBoard.jsx","components/App/App.styled.js","components/App/App.jsx","index.js"],"names":["Title","styled","h1","PageTitle","text","iconSize","Object","freeze","sm","theme","colors","white","black","green","red","blue","primaryText","secondaryText","spacing","Card","div","props","EventName","h2","Info","p","Chip","span","eventType","Event","name","location","speaker","type","start","end","formattedStart","format","Date","parse","formatEventStart","duration","formatDistanceStrict","formatEventDuration","size","Board","EventBoard","events","console","log","map","time","Container","App","upcomingEvents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2lDAEaA,EAAQC,IAAOC,GAAV,qG,OCCLC,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1B,OAAO,cAACJ,EAAD,UAAQI,K,wBCJJC,EAAWC,OAAOC,OAAO,CACpCC,GAAI,KCDOC,EAAQH,OAAOC,OAAO,CAC/BG,OAAQ,CACJC,MAAO,UACPC,MAAO,UACPC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,YAAa,UACbC,cAAe,WAEnBC,QAAS,ICPAC,EAAOlB,IAAOmB,IAAV,6GAEL,SAAAC,GAAK,2BAAkBA,EAAMZ,MAAMC,OAAOE,UACzC,SAAAS,GAAK,OAAIA,EAAMZ,MAAMS,WAIrBI,EAAYrB,IAAOsB,GAAV,qKASTC,EAAOvB,IAAOwB,EAAV,mSAKL,SAAAJ,GAAK,OAAIA,EAAMZ,MAAMC,OAAOM,eAS7B,SAAAK,GAAK,OAAIA,EAAMZ,MAAMC,OAAOO,iBAK1BS,EAAOzB,IAAO0B,KAAV,8NAQN,SAAAN,GAAK,OAAIA,EAAMZ,MAAMC,OAAOC,SAEjB,YAA2B,IAAxBiB,EAAuB,EAAvBA,UAAWnB,EAAY,EAAZA,MAC5B,OAAQmB,GACJ,IAAK,OACD,OAAOnB,EAAMC,OAAOG,MACxB,IAAK,OACD,OAAOJ,EAAMC,OAAOK,KACxB,IAAK,MACD,OAAON,EAAMC,OAAOI,IACxB,QACI,OAAOL,EAAMC,OAAOE,UCjDvBiB,EAAQ,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACpDC,ECNsB,SAAAF,GAC9B,OAAOG,YACLC,KAAKC,MAAML,GACX,uBDGuBM,CAAiBN,GAClCO,EERyB,SAACP,EAAOC,GACzC,OAAOO,YAAqBJ,KAAKC,MAAML,GAAQI,KAAKC,MAAMJ,IFOvCQ,CAAoBT,EAAOC,GAE5C,OACA,eAAChB,EAAD,WACE,cAACG,EAAD,UAAYQ,IACZ,eAACN,EAAD,WACE,cAAC,IAAD,CAAgBoB,KAAMvC,EAASG,KAC9BuB,KAEH,eAACP,EAAD,WACE,cAAC,IAAD,CAAWoB,KAAMvC,EAASG,KACzBwB,KAEH,eAACR,EAAD,WACE,cAAC,IAAD,CAAeoB,KAAMvC,EAASG,KAC7B4B,KAEH,eAACZ,EAAD,WACE,cAAC,IAAD,CAASoB,KAAMvC,EAASG,KACvBiC,KAGH,cAACf,EAAD,CAAME,UAAaK,EAAnB,SAA0BA,QG9BnBY,EAAQ5C,IAAOmB,IAAV,4KCEL0B,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEzB,OADAC,QAAQC,IAAIF,GAER,cAACF,EAAD,UACKE,EAAOG,KAAI,gBAAEpB,EAAF,EAAEA,KAAMC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,KAAMkB,EAAjC,EAAiCA,KAAjC,OACR,cAAC,EAAD,CAEIrB,KAAMA,EACNC,SAAUA,EACVC,QAASA,EACTC,KAAMA,EACNC,MAAOiB,EAAKjB,MACZC,IAAKgB,EAAKhB,KANLL,S,QCRZsB,EAAYnD,IAAOmB,IAAV,+CCITiC,EAAM,WACf,OACI,eAACD,EAAD,WACI,cAAC,EAAD,CAAWhD,KAAK,0CAChB,cAAC,EAAD,CAAY2C,OAAQO,QCHhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAehD,MAAOA,EAAtB,SACA,cAAC,EAAD,QAGFiD,SAASC,eAAe,W","file":"static/js/main.48fe781b.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h1`\r\n  margin-top: 0;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n\r\n`;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { Title } from './PageTitle.styled';\r\n\r\nexport const PageTitle = ({ text }) => {\r\n  return <Title>{text}</Title>;\r\n};\r\n\r\nPageTitle.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n}\r\n","export const iconSize = Object.freeze({\n  sm: 16,\n});\n","export const theme = Object.freeze({\r\n    colors: {\r\n        white: '#ffffff',\r\n        black: '#010101',\r\n        green: '#4caf50',\r\n        red: '#f44336',\r\n        blue: '#2196f3',\r\n        primaryText: '#212121',\r\n        secondaryText: '#757575',\r\n    },\r\n    spacing: 8,\r\n});","import styled from '@emotion/styled';\r\n\r\n\r\nexport const Card = styled.div`\r\n  position: relative;\r\n  border: ${props => `2px dashed ${props.theme.colors.black}`};\r\n  padding: ${props => props.theme.spacing}px;\r\n  border-radius: 4px;\r\n`;\r\n\r\nexport const EventName = styled.h2`\r\n  margin-top: 0;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-weight: 700;\r\n  letter-spacing: 0.5px;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport const Info = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 0;\r\n  margin-bottom: 8px;\r\n  color:  ${props => props.theme.colors.primaryText};\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n  letter-spacing: 0.25px;\r\n\r\n  svg {\r\n  display: block;\r\n  margin-right: 8px;\r\n  color: ${props => props.theme.colors.secondaryText};\r\n  }\r\n\r\n`;\r\n\r\nexport const Chip = styled.span`\r\n  position: absolute;\r\n  top: 4px;\r\n  right: 4px;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  text-transform: uppercase;\r\n  background-color: #000;\r\n  color: ${props => props.theme.colors.white};\r\n\r\n  background-color: ${({ eventType, theme }) => {\r\n        switch (eventType) {\r\n            case 'free':\r\n                return theme.colors.green;\r\n            case 'paid':\r\n                return theme.colors.blue;\r\n            case 'vip':\r\n                return theme.colors.red;\r\n            default:\r\n                return theme.colors.black;\r\n        }\r\n    }}\r\n`;\r\n\r\n// background-image: ${props => `url(${props.img})`}\r\n\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { FaMapMarkerAlt, FaUserAlt, FaCalendarAlt, FaClock } from \"react-icons/fa\";\r\n// import { formatEventStart } from 'utils/formatEventStart';\r\n// import {formatEventDuration} from 'utils/formatEventDuration';\r\nimport { formatEventStart, formatEventDuration } from 'utils';\r\nimport { iconSize } from '../../constants';\r\nimport { Card, EventName, Info, Chip } from './Event.styled';\r\n\r\nexport const Event = ({ name, location, speaker, type, start, end }) => {\r\n    const formattedStart = formatEventStart(start);\r\n    const duration = formatEventDuration(start, end);\r\n\r\n    return (    \r\n    <Card>\r\n      <EventName>{name}</EventName>\r\n      <Info>\r\n        <FaMapMarkerAlt size={iconSize.sm} />   \r\n        {location}\r\n      </Info>\r\n      <Info>\r\n        <FaUserAlt size={iconSize.sm}/>\r\n        {speaker}\r\n      </Info>\r\n      <Info>\r\n        <FaCalendarAlt size={iconSize.sm}/>\r\n        {formattedStart}\r\n      </Info>\r\n      <Info>\r\n        <FaClock size={iconSize.sm} />\r\n        {duration}\r\n      </Info>\r\n            {/* <span className={css.chip}>{type}</span> */}\r\n      <Chip eventType = {type}>{type}</Chip>\r\n    </Card>\r\n  );\r\n}\r\n\r\n//className={`${css.chip} ${css[type]}`}\r\n\r\nEvent.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    location: PropTypes.string.isRequired,\r\n    speaker: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    start: PropTypes.string.isRequired,\r\n    end: PropTypes.string.isRequired,\r\n}\r\n\r\n","import { format } from 'date-fns';\n// import { ru } from 'date-fns/locale';  // Если хотим напр. на русском\n\nexport const formatEventStart = start => {\n  return format(\n    Date.parse(start),\n    'dd MMMM yyyy, HH:mm',\n    // { locale: ru, }\n  );\n};\n","import { formatDistanceStrict } from 'date-fns';\n\nexport const formatEventDuration = (start, end) => {\n  return formatDistanceStrict(Date.parse(start), Date.parse(end));\n};\n","import styled from '@emotion/styled';\r\n\r\nexport const Board = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, auto));\r\n  gap: 24px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`;","import {Event} from 'components/Event/Event';\r\nimport PropTypes from 'prop-types';\r\nimport { Board } from './EventBoard.styled';\r\n\r\nexport const EventBoard = ({ events }) => {\r\n    console.log(events);\r\n    return (\r\n        <Board>\r\n            {events.map(({name, location, speaker, type, time}) => (\r\n                <Event\r\n                    key={name}\r\n                    name={name}\r\n                    location={location}\r\n                    speaker={speaker}\r\n                    type={type}\r\n                    start={time.start}\r\n                    end={time.end}\r\n                />\r\n            ))}\r\n        </Board>\r\n    )\r\n}\r\n\r\nEventBoard.propTypes = {\r\n    events: PropTypes.arrayOf(PropTypes.exact({\r\n        name: PropTypes.string.isRequired,\r\n        location: PropTypes.string.isRequired,\r\n        speaker: PropTypes.string.isRequired,\r\n        type: PropTypes.string.isRequired,\r\n        time: PropTypes.exact({\r\n            start: PropTypes.string.isRequired,\r\n            end: PropTypes.string.isRequired,\r\n        })     \r\n    },),\r\n    ),\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  padding : 24ox;\r\n`;","import { PageTitle } from \"components/PageTitle/PageTitle\";\r\nimport { EventBoard } from \"components/EventBoard/EventBoard\";\r\nimport upcomingEvents from '../../upcoming-events.json';\r\nimport { Container } from './App.styled';\r\n\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Container>\r\n            <PageTitle text=\"24th Core Worlds Coalition Conference\" />\r\n            <EventBoard events={upcomingEvents} />\r\n        </Container>\r\n    );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\nimport './index.css';\nimport { App } from 'components/App/App';\nimport { theme } from 'constants/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n    <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}